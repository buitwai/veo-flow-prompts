rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to validate timestamp
    function hasValidTimestamp() {
      return request.resource.data.keys().hasAll(['createdAt']) &&
             request.resource.data.createdAt is timestamp;
    }
    
    // Rules for users collection
    match /users/{userId} {
      // Users can only read and write their own user document
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && hasValidTimestamp();
      allow update: if isOwner(userId) &&
                       request.resource.data.keys().hasAll(['updatedAt']) &&
                       request.resource.data.updatedAt is timestamp;
      allow delete: if isOwner(userId);
      
      // Rules for prompts subcollection
      match /prompts/{promptId} {
        // Users can only read and write their own prompts
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && hasValidTimestamp();
        allow update: if isOwner(userId) &&
                         request.resource.data.keys().hasAll(['updatedAt']) &&
                         request.resource.data.updatedAt is timestamp;
        allow delete: if isOwner(userId);
      }
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}